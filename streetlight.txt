
#include <FirebaseArduino.h>
#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <ArduinoJson.h>

const int ledPin = D0;
const int ldrPin = A0;

// Set these to run example.
#define FIREBASE_HOST "hackathoniot-5327e.firebaseio.com"
#define FIREBASE_AUTH "ZpGFkEKHXZdC0ZSTAfmflzEigf6SKQoOZJA0Z4Hw"
#define WIFI_SSID "abc"
#define WIFI_PASSWORD "abc125125"
// your network SSID (name) & network password
char myssid[] = "abc";
char mypass[] = "abc125125";

// unwiredlabs Hostname & Geolocation Endpoint url
const char* Host = "ap1.unwiredlabs.com";
String endpoint = "/v2/process.php";

// UnwiredLabs API_Token. Signup here to get a free token https://unwiredlabs.com/trial
String token = "7c3e62bb95cd3a";

String jsonString = "{\n";

// Variables to store unwiredlabs response
double latitude = 0.0;
double longitude = 0.0;
double accuracy = 0.0;


void setup() {
Serial.begin(9600);
 // connect to wifi.
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.println("connecting");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
  }
  Serial.println();
//  Serial.println("connected: ");
  Serial.println(WiFi.localIP());
  
  Firebase.begin(FIREBASE_HOST, FIREBASE_AUTH);
pinMode(ledPin, OUTPUT);
pinMode(ldrPin, INPUT);
 char bssid[6];
    DynamicJsonBuffer jsonBuffer;

    // WiFi.scanNetworks will return the number of networks found
    int n = WiFi.scanNetworks();
    Serial.println("scan done");

    if (n == 0 ) {
        Serial.println("No networks available");
    } else {
        Serial.print(n);
        Serial.println(" networks found");
    }

      // now build the jsonString...
      jsonString = "{\n";
      jsonString += "\"token\" : \"";
      jsonString += "7c3e62bb95cd3a\",";
      jsonString += "\n";
      jsonString += "\"wifi\": [\n";
      for (int j = 0; j < n; ++j) {
          jsonString += "{\n";
          jsonString += "\"bssid\" : \"";
          jsonString += (WiFi.BSSIDstr(j));
          jsonString += "\",\n";
          jsonString += "\"signal\": ";
          jsonString += WiFi.RSSI(j);
          jsonString += "\n";
          if (j < n - 1) {
              jsonString += "},\n";
          } else {
              jsonString += "}\n";
          }
      }
      
      jsonString += "\n";
      jsonString += ("],\n");
      jsonString += "\"address\": ";
        jsonString += "1";
      jsonString += ("}\n");
      Serial.println(jsonString);
       HTTPClient http; 
      
        http.begin("http://manishvvasaniya.000webhostapp.com/location.php"); 
        http.addHeader("Content-Type", "application/x-www-form-urlencoded");    //Specify content-type header
           String postData = "status=" + jsonString + "&Json=" + jsonString ; 
          int httpCode = http.POST(postData);   //Send the request
          String payload = http.getString();    //Get the response payload
          
          Serial.println(httpCode+"//");   //Print HTTP return code
          Serial.println(payload);    //Print request response payload
          JsonObject& root = jsonBuffer.parseObject(payload);
          const char* Lat = root["lat"];
          const char* Long = root["lon"];
           Firebase.setString("lat", Lat);
           Firebase.setString("lon", Long);
          http.end();


}
int n = 0;

void loop() {

int ldrStatus = analogRead(ldrPin);
  if (ldrStatus <=300) {
    
    digitalWrite(ledPin, HIGH);
    Serial.println(ldrStatus);
    Firebase.setString("number", "ON");
    Serial.println("LDR is DARK, LED is ON");
   Serial.println("Firebase"+Firebase.getString("number"));
     if (Firebase.failed()) {
        Serial.print("setting /message failed:");
        Serial.println(Firebase.error());  
       return;
     }
//    delay(1000);

  }

  else {
  Serial.println(ldrStatus);
  digitalWrite(ledPin, LOW);
  Firebase.setString("number", "OFF");
  Serial.println("LED is OFF");
     Serial.println("Firebase"+Firebase.getString("number"));
    if (Firebase.failed()) {
        Serial.println("setting /message failed:");
        Serial.println(Firebase.error());  
       return;
     }
//  delay(1000);

  }
}